using QuestPDF.Fluent;
using QuestPDF.Infrastructure;
using Hackathon_2025_ESG.Models;
using QuestPDF.Helpers;

namespace Hackathon_2025_ESG.Services
{
    public class EsgReportPdfDocument : IDocument
    {
        private readonly EsgReportResponse _data;

        public EsgReportPdfDocument(EsgReportResponse data)
        {
            _data = data;
        }

        public DocumentMetadata GetMetadata() => new DocumentMetadata
        {
            Title = $"{_data.Company} ESG Report",
            Author = "Hackathon ESG AI System",
            Subject = "ESG Analysis Report",
            Keywords = "ESG, AI, Bedrock, Sustainability"
        };

        public void Compose(IDocumentContainer container)
        {
            container.Page(page =>
            {
                page.Size(PageSizes.A4);
                page.Margin(40);
                page.DefaultTextStyle(x => x.FontSize(12));
                
                page.Header()
                    .Text($"{_data.Company} ESG Report")
                    .FontSize(20).Bold().AlignCenter();

                page.Content().PaddingVertical(20).Column(col =>
                {
                    // --- Overview ---
                    col.Item().Text($"Reporting Period: {_data.ReportingPeriod}");
                    col.Item().PaddingBottom(20).Text($"Final ESG Score: {_data.FinalScore}")
                        .FontSize(16).Bold().FontColor(Colors.Green.Darken2);

                    // --- Section Scores ---
                    foreach (var section in _data.Sections)
                    {
                        col.Item().Container().PaddingVertical(5).Text(section.Section)
                            .FontSize(14).Bold();

                        col.Item().Container().PaddingBottom(10)
                            .Text($"Score: {section.Score:F2}")
                            .FontColor(Colors.Blue.Darken1);

                        // Indicators table
                        col.Item().Table(table =>
                        {
                            table.ColumnsDefinition(cols =>
                            {
                                cols.RelativeColumn(2); // Indicator Name
                                cols.RelativeColumn(1); // Fulfilled
                                cols.RelativeColumn(2); // Evidence
                            });

                            table.Header(header =>
                            {
                                header.Cell().Text("Indicator").Bold();
                                header.Cell().Text("Fulfilled").Bold();
                                header.Cell().Text("Evidence").Bold();
                            });

                            foreach (var indicator in section.Indicators)
                            {
                                table.Cell().Text(indicator.Name);

                                table.Cell().Text(indicator.Fulfilled ? "Yes" : "No")
                                    .FontColor(indicator.Fulfilled ? Colors.Green.Darken2 : Colors.Red.Darken2);

                                var evidenceText = indicator.Evidence != null && indicator.Evidence.Any()
                                    ? string.Join("\n", indicator.Evidence.Select(e => $"{e.File}: {e.Excerpt} ({e.EvidenceConfidence})"))
                                    : indicator.MissingEvidenceReason ?? "No evidence provided";

                                table.Cell().Text(evidenceText);
                            }
                        });
                    }

                    // --- Suggestions ---
                    if (_data.ModelSuggestions != null && _data.ModelSuggestions.Any())
                    {
                        col.Item().PaddingTop(20).Text("Model Suggestions")
                            .FontSize(14).Bold();

                        foreach (var suggestion in _data.ModelSuggestions)
                        {
                            col.Item().Text($"â€¢ {suggestion.Suggestion}")
                                .Bold().FontColor(Colors.Orange.Darken1);
                            col.Item().Container().PaddingBottom(5)
                                .Text($"  Justification: {suggestion.Justification}")
                                .Italic().FontSize(10);
                        }
                    }
                });

                page.Footer()
                    .AlignCenter()
                    .Text(text =>
                    {
                        text.Span("Generated by Hackathon ESG AI System - ");
                        text.CurrentPageNumber();
                        text.Span(" / ");
                        text.TotalPages();
                    });
            });
        }
    }
}
